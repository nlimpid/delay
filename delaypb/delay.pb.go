// Code generated by protoc-gen-go. DO NOT EDIT.
// source: delay.proto

package delaypb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Status int32

const (
	Status_success Status = 0
	Status_fail    Status = 1
)

var Status_name = map[int32]string{
	0: "success",
	1: "fail",
}

var Status_value = map[string]int32{
	"success": 0,
	"fail":    1,
}

func (x Status) String() string {
	return proto.EnumName(Status_name, int32(x))
}

func (Status) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a2ba2ab6bc309c4a, []int{0}
}

type Task struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	Params               *any.Any `protobuf:"bytes,3,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Task) Reset()         { *m = Task{} }
func (m *Task) String() string { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()    {}
func (*Task) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2ba2ab6bc309c4a, []int{0}
}

func (m *Task) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Task.Unmarshal(m, b)
}
func (m *Task) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Task.Marshal(b, m, deterministic)
}
func (m *Task) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Task.Merge(m, src)
}
func (m *Task) XXX_Size() int {
	return xxx_messageInfo_Task.Size(m)
}
func (m *Task) XXX_DiscardUnknown() {
	xxx_messageInfo_Task.DiscardUnknown(m)
}

var xxx_messageInfo_Task proto.InternalMessageInfo

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Task) GetParams() *any.Any {
	if m != nil {
		return m.Params
	}
	return nil
}

type AddTaskReq struct {
	Task                 *Task    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	DelayTime            int64    `protobuf:"varint,2,opt,name=delayTime,proto3" json:"delayTime,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddTaskReq) Reset()         { *m = AddTaskReq{} }
func (m *AddTaskReq) String() string { return proto.CompactTextString(m) }
func (*AddTaskReq) ProtoMessage()    {}
func (*AddTaskReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2ba2ab6bc309c4a, []int{1}
}

func (m *AddTaskReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddTaskReq.Unmarshal(m, b)
}
func (m *AddTaskReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddTaskReq.Marshal(b, m, deterministic)
}
func (m *AddTaskReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTaskReq.Merge(m, src)
}
func (m *AddTaskReq) XXX_Size() int {
	return xxx_messageInfo_AddTaskReq.Size(m)
}
func (m *AddTaskReq) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTaskReq.DiscardUnknown(m)
}

var xxx_messageInfo_AddTaskReq proto.InternalMessageInfo

func (m *AddTaskReq) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func (m *AddTaskReq) GetDelayTime() int64 {
	if m != nil {
		return m.DelayTime
	}
	return 0
}

type AddTaskRsp struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AddTaskRsp) Reset()         { *m = AddTaskRsp{} }
func (m *AddTaskRsp) String() string { return proto.CompactTextString(m) }
func (*AddTaskRsp) ProtoMessage()    {}
func (*AddTaskRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2ba2ab6bc309c4a, []int{2}
}

func (m *AddTaskRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AddTaskRsp.Unmarshal(m, b)
}
func (m *AddTaskRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AddTaskRsp.Marshal(b, m, deterministic)
}
func (m *AddTaskRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddTaskRsp.Merge(m, src)
}
func (m *AddTaskRsp) XXX_Size() int {
	return xxx_messageInfo_AddTaskRsp.Size(m)
}
func (m *AddTaskRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_AddTaskRsp.DiscardUnknown(m)
}

var xxx_messageInfo_AddTaskRsp proto.InternalMessageInfo

type NotifyReq struct {
	S                    Status   `protobuf:"varint,1,opt,name=s,proto3,enum=delaypb.Status" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyReq) Reset()         { *m = NotifyReq{} }
func (m *NotifyReq) String() string { return proto.CompactTextString(m) }
func (*NotifyReq) ProtoMessage()    {}
func (*NotifyReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2ba2ab6bc309c4a, []int{3}
}

func (m *NotifyReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyReq.Unmarshal(m, b)
}
func (m *NotifyReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyReq.Marshal(b, m, deterministic)
}
func (m *NotifyReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyReq.Merge(m, src)
}
func (m *NotifyReq) XXX_Size() int {
	return xxx_messageInfo_NotifyReq.Size(m)
}
func (m *NotifyReq) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyReq.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyReq proto.InternalMessageInfo

func (m *NotifyReq) GetS() Status {
	if m != nil {
		return m.S
	}
	return Status_success
}

type NotifyRsp struct {
	Task                 *Task    `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NotifyRsp) Reset()         { *m = NotifyRsp{} }
func (m *NotifyRsp) String() string { return proto.CompactTextString(m) }
func (*NotifyRsp) ProtoMessage()    {}
func (*NotifyRsp) Descriptor() ([]byte, []int) {
	return fileDescriptor_a2ba2ab6bc309c4a, []int{4}
}

func (m *NotifyRsp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NotifyRsp.Unmarshal(m, b)
}
func (m *NotifyRsp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NotifyRsp.Marshal(b, m, deterministic)
}
func (m *NotifyRsp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRsp.Merge(m, src)
}
func (m *NotifyRsp) XXX_Size() int {
	return xxx_messageInfo_NotifyRsp.Size(m)
}
func (m *NotifyRsp) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRsp.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRsp proto.InternalMessageInfo

func (m *NotifyRsp) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

func init() {
	proto.RegisterEnum("delaypb.Status", Status_name, Status_value)
	proto.RegisterType((*Task)(nil), "delaypb.task")
	proto.RegisterType((*AddTaskReq)(nil), "delaypb.AddTaskReq")
	proto.RegisterType((*AddTaskRsp)(nil), "delaypb.AddTaskRsp")
	proto.RegisterType((*NotifyReq)(nil), "delaypb.NotifyReq")
	proto.RegisterType((*NotifyRsp)(nil), "delaypb.NotifyRsp")
}

func init() { proto.RegisterFile("delay.proto", fileDescriptor_a2ba2ab6bc309c4a) }

var fileDescriptor_a2ba2ab6bc309c4a = []byte{
	// 292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x90, 0x4d, 0x4f, 0x32, 0x31,
	0x10, 0xc7, 0x29, 0x2f, 0xcb, 0xc3, 0xec, 0x23, 0x92, 0x91, 0x03, 0x12, 0x8d, 0xd8, 0x13, 0x21,
	0xa6, 0x98, 0x35, 0x7a, 0xe7, 0x03, 0xe8, 0xa1, 0xe1, 0xe4, 0xad, 0xb0, 0x0b, 0x69, 0x78, 0x69,
	0x65, 0x8a, 0xc9, 0x7e, 0x7b, 0xb3, 0xed, 0xba, 0x7b, 0xe0, 0xe2, 0xb1, 0xbf, 0xfc, 0xe7, 0x37,
	0xff, 0x29, 0xc4, 0x69, 0xb6, 0x57, 0xb9, 0xb0, 0x27, 0xe3, 0x0c, 0x76, 0xfd, 0xc3, 0xae, 0xc6,
	0xb7, 0x5b, 0x63, 0xb6, 0xfb, 0x6c, 0xee, 0xf1, 0xea, 0xbc, 0x99, 0xab, 0x63, 0x99, 0xe1, 0x9f,
	0xd0, 0x76, 0x8a, 0x76, 0xd8, 0x87, 0xa6, 0x4e, 0x47, 0x6c, 0xc2, 0xa6, 0x3d, 0xd9, 0xd4, 0x29,
	0x0e, 0xa1, 0xe3, 0x8c, 0xd5, 0xeb, 0x51, 0xd3, 0xa3, 0xf0, 0xc0, 0x27, 0x88, 0xac, 0x3a, 0xa9,
	0x03, 0x8d, 0x5a, 0x13, 0x36, 0x8d, 0x93, 0xa1, 0x08, 0x66, 0xf1, 0x6b, 0x16, 0x8b, 0x63, 0x2e,
	0xcb, 0x0c, 0x7f, 0x07, 0x58, 0xa4, 0xe9, 0x52, 0xd1, 0x4e, 0x66, 0x5f, 0xf8, 0x18, 0x36, 0xf9,
	0x1d, 0x71, 0x72, 0x25, 0xca, 0x72, 0xa2, 0x80, 0x32, 0x94, 0xb8, 0x83, 0x9e, 0xa7, 0x4b, 0x7d,
	0xc8, 0xfc, 0xe2, 0x96, 0xac, 0x01, 0xff, 0x5f, 0xeb, 0xc8, 0xf2, 0x19, 0xf4, 0x3e, 0x8c, 0xd3,
	0x9b, 0xbc, 0x70, 0xdf, 0x03, 0x23, 0x2f, 0xee, 0x27, 0xd7, 0x95, 0x98, 0x9c, 0x72, 0x67, 0x92,
	0x8c, 0xb8, 0xa8, 0xb2, 0x64, 0xff, 0xd0, 0x63, 0xf6, 0x00, 0x51, 0x18, 0xc6, 0x18, 0xba, 0x74,
	0x5e, 0xaf, 0x33, 0xa2, 0x41, 0x03, 0xff, 0x41, 0x7b, 0xa3, 0xf4, 0x7e, 0xc0, 0x92, 0x6f, 0xe8,
	0xf8, 0x31, 0x7c, 0x85, 0x6e, 0xd9, 0x09, 0x6f, 0x2a, 0x53, 0x7d, 0xf4, 0xf8, 0x12, 0x92, 0xe5,
	0x0d, 0x7c, 0x83, 0x28, 0x14, 0x42, 0xac, 0x02, 0xd5, 0x35, 0xe3, 0x0b, 0x56, 0xcc, 0x4c, 0xd9,
	0x33, 0x5b, 0x45, 0xfe, 0x9f, 0x5f, 0x7e, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x36, 0x8b, 0x94,
	0xe7, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DelayClient is the client API for Delay service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DelayClient interface {
	AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTaskRsp, error)
	Notify(ctx context.Context, opts ...grpc.CallOption) (Delay_NotifyClient, error)
}

type delayClient struct {
	cc *grpc.ClientConn
}

func NewDelayClient(cc *grpc.ClientConn) DelayClient {
	return &delayClient{cc}
}

func (c *delayClient) AddTask(ctx context.Context, in *AddTaskReq, opts ...grpc.CallOption) (*AddTaskRsp, error) {
	out := new(AddTaskRsp)
	err := c.cc.Invoke(ctx, "/delaypb.delay/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *delayClient) Notify(ctx context.Context, opts ...grpc.CallOption) (Delay_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Delay_serviceDesc.Streams[0], "/delaypb.delay/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &delayNotifyClient{stream}
	return x, nil
}

type Delay_NotifyClient interface {
	Send(*NotifyReq) error
	Recv() (*NotifyRsp, error)
	grpc.ClientStream
}

type delayNotifyClient struct {
	grpc.ClientStream
}

func (x *delayNotifyClient) Send(m *NotifyReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *delayNotifyClient) Recv() (*NotifyRsp, error) {
	m := new(NotifyRsp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DelayServer is the server API for Delay service.
type DelayServer interface {
	AddTask(context.Context, *AddTaskReq) (*AddTaskRsp, error)
	Notify(Delay_NotifyServer) error
}

func RegisterDelayServer(s *grpc.Server, srv DelayServer) {
	s.RegisterService(&_Delay_serviceDesc, srv)
}

func _Delay_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelayServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/delaypb.delay/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelayServer).AddTask(ctx, req.(*AddTaskReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Delay_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DelayServer).Notify(&delayNotifyServer{stream})
}

type Delay_NotifyServer interface {
	Send(*NotifyRsp) error
	Recv() (*NotifyReq, error)
	grpc.ServerStream
}

type delayNotifyServer struct {
	grpc.ServerStream
}

func (x *delayNotifyServer) Send(m *NotifyRsp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *delayNotifyServer) Recv() (*NotifyReq, error) {
	m := new(NotifyReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Delay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "delaypb.delay",
	HandlerType: (*DelayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _Delay_AddTask_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Notify",
			Handler:       _Delay_Notify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "delay.proto",
}
